esphome:
  on_boot:
    priority: -100
    then:
      - script.execute: get_mmwave_params # still needed with getmmwConf()

# Enable logging
logger:
  logs:
    sensor: INFO # DEBUG level with uart_target_output = overload!
    text_sensor: INFO

# Enable Home Assistant API
api:
  reboot_timeout: 6h
  services:
      # Service to send a command directly to the display. Useful for testing
    - service: send_command
      variables:
        cmd: string
      then:
        - uart.write: !lambda
            std::string command = to_string(cmd) +"\r";
            return std::vector<uint8_t>(command.begin(), command.end());

substitutions:
  device_name: mmwave-extra
  uart_tx_pin: GPIO19
  uart_rx_pin: GPIO23
  gpio_pin: GPIO18

uart:
  id: uart_bus
  tx_pin: ${uart_tx_pin}
  rx_pin: ${uart_rx_pin}
  baud_rate: 115200
  debug:
    direction: BOTH
    after:
      delimiter: "\n"
    sequence:
      - lambda: UARTDebug::log_string(direction, bytes);

binary_sensor:
  - platform: gpio
    name: mmwave_presence_detection
    id: mmwave_presence_detection
    pin:
      number: ${gpio_pin}
      mode: INPUT_PULLDOWN
    on_state:
      - if:
          condition:
            binary_sensor.is_off: mmwave_presence_detection
          then:
            - sensor.template.publish:
                id: num_targets
                state: 0
            - lambda: |-
                return clearTargets();
    
sensor:      
#  - platform: uptime
#    name: uptime_sensor
#    id: uptime_sensor
#    update_interval: 60s
#    internal: true
#    on_raw_value:
#      then:
#        - text_sensor.template.publish:
#            id: uptime_human_readable
#            state: !lambda |-
#                      int seconds = round(id(uptime_sensor).raw_state);
#                      int days = seconds / (24 * 3600);
#                      seconds = seconds % (24 * 3600);
#                      int hours = seconds / 3600;
#                      seconds = seconds % 3600;
#                      int minutes = seconds /  60;
#                      seconds = seconds % 60;
#                      return (
#                        (days ? to_string(days)+":" : "00:") +
#                        (hours ? to_string(hours)+":" : "00:") +
#                        (minutes ? to_string(minutes)+":" : "00:") +
#                        (to_string(seconds))
#                      ).c_str();
              
  - platform: template
    name: target_1_distance_m
    id: target_1_distance_m # do not change
    internal: true
    
  - platform: template
    name: target_2_distance_m
    id: target_2_distance_m # do not change
    internal: true
    
  - platform: template
    name: target_3_distance_m
    id: target_3_distance_m # do not change
    internal: true
    
  - platform: template
    name: target_4_distance_m
    id: target_4_distance_m # do not change
    internal: true
    
  # - platform: template
  #   name: target_5_distance_m
  #   id: target_5_distance_m # do not change
  #   internal: true
    
  # - platform: template
  #   name: target_6_distance_m
  #   id: target_6_distance_m # do not change
  #   internal: true
    
  # - platform: template
  #   name: target_7_distance_m
  #   id: target_7_distance_m # do not change
  #   internal: true
    
  # - platform: template
  #   name: target_8_distance_m
  #   id: target_8_distance_m # do not change
  #   internal: true

  - platform: template
    name: target_1_SNR
    id: target_1_SNR # do not change
    internal: true

  - platform: template
    name: target_2_SNR
    id: target_2_SNR # do not change
    internal: true
    
  - platform: template
    name: target_3_SNR
    id: target_3_SNR # do not change
    internal: true
    
  - platform: template
    name: target_4_SNR
    id: target_4_SNR # do not change
    internal: true

  # - platform: template
  #   name: target_5_SNR
  #   id: target_5_SNR # do not change
  #   internal: true

  # - platform: template
  #   name: target_6_SNR
  #   id: target_6_SNR # do not change
  #   internal: true
    
  # - platform: template
  #   name: target_7_SNR
  #   id: target_7_SNR # do not change
  #   internal: true
    
  # - platform: template
  #   name: target_8_SNR
  #   id: target_8_SNR # do not change
  #   internal: true

  - platform: template
    name: num_targets
    id: num_targets # do not change

  - platform: custom
    lambda: |-
      auto s = new leapmmw(id(uart_bus));
      App.register_component(s);
      return {};
    sensors:
      
switch:
  - platform: safe_mode
    name: use_safe_mode

  - platform: template
    name: mmwave_sensor
    id: mmwave_sensor # do not change
    entity_category: config
    optimistic: true
    # assumed_state: true
    turn_on_action:
      - uart.write: "setUartOutput 1 0"
      - delay: 1s
      - uart.write: "setUartOutput 2 1 1 2"
      - delay: 1s
      - uart.write: "saveConfig"
      - delay: 3s 
      - uart.write: "sensorStart"
      # - delay: 3s
      # - script.execute: get_mmwave_params # not needed with getmmwConf
    turn_off_action:
      - uart.write: "sensorStop"

  - platform: template
    name: led
    id: led  # do not change
    entity_category: config
    optimistic: true
    turn_on_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: "setLedMode 1 0"
      - delay: 1s
      - lambda: |-
          leapmmw(id(uart_bus)).getmmwConf("getLedMode 1");
      - delay: 1s 
      - switch.turn_on: mmwave_sensor
    turn_off_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: "setLedMode 1 1"
      - delay: 1s
      - lambda: |-
          leapmmw(id(uart_bus)).getmmwConf("getLedMode 1");
      - delay: 1s
      - switch.turn_on: mmwave_sensor 

number:
  - platform: template
    name: distance
    id: distance # do not change
    entity_category: config
    min_value: 0.15
    max_value: 9.45
    initial_value: 6
    optimistic: true
    step: 0.15
    unit_of_measurement: M
    mode: box
    # lambda: |-
    #   return leapmmw(id(uart_bus)).getmmwConf("getRange");
    set_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: !lambda
          std::string range = "setRange 0 " + str_sprintf("%.2f", x);
          return std::vector<unsigned char>(range.begin(), range.end());
      - delay: 1s
      - lambda: |-
          leapmmw(id(uart_bus)).getmmwConf("getRange");
      - delay: 1s
      - switch.turn_on: mmwave_sensor 
      
  - platform: template
    name: latency
    id: latency # do not change
    entity_category: config
    min_value: 1
    max_value: 600
    initial_value: 15
    optimistic: true
    # lambda: |-
    #   return leapmmw(id(uart_bus)).getmmwConf("getLatency");
    step: 1
    unit_of_measurement: s
    mode: box
    set_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: !lambda
          std::string setL = "setLatency 0.1 " + str_sprintf("%.0f", x);
          return std::vector<unsigned char>(setL.begin(), setL.end());
      - delay: 1s
      - lambda: |-
          leapmmw(id(uart_bus)).getmmwConf("getLatency");
      - delay: 1s
      - switch.turn_on: mmwave_sensor

  - platform: template
    name: sensitivity
    id: sensitivity # do not change
    entity_category: config
    min_value: 0
    max_value: 9
    initial_value: 7
    optimistic: true
    # lambda: |-
    #   return leapmmw(id(uart_bus)).getmmwConf("getSensitivity");
    step: 1
    set_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: !lambda
          std::string mss = "setSensitivity " + to_string((int)x);
          return std::vector<unsigned char>(mss.begin(), mss.end());
      - delay: 1s
      - lambda: |-
          leapmmw(id(uart_bus)).getmmwConf("getSensitivity");
      - delay: 1s
      - switch.turn_on: mmwave_sensor

button:
  - platform: restart
    name: Restart_ESP_$device_name
    entity_category: diagnostic
    on_press:
      - uart.write:
          id: uart_bus
          data: "resetSystem 0"

  - platform: template
    name: factory_reset_MCU_$device_name
    id: factory_reset_MCU
    entity_category: diagnostic
    on_press:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: "resetCfg"
      - delay: 3s
      - switch.turn_on: mmwave_sensor 
      
script:
  - id: get_mmwave_params
    then: 
      - uart.write: "getLedMode 1"
      - delay: 1s
      - uart.write: "getRange"
      - delay: 1s
      - uart.write: "getLatency"
      - delay: 1s
      - uart.write: "getSensitivity"
